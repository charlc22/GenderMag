public interface Edible {
	//abstract method
	public abstract String howToEat();
	
	//default method
	default public String howToCook() {
		return "Cook how you want";
	}
}

public class Soup implements Edible {
	private String souptype;
	
	
	public Soup() {
	}

	public Soup(String souptype) {
		this.souptype = souptype;
	}
	
	public void blow() {
		System.out.println("its hot! you blow on the soup to cool it down");
	}
	
	public String getSouptype() {
		return souptype;
	}

	public void setSouptype(String souptype) {
		this.souptype = souptype;
	}

	@Override
	public String toString() {
		return "Soup [souptype=" + souptype + "]";
	}
	
	//Implemented method from Edible
	@Override
	public String howToEat() {
		return "Eat with a spoon";
	}

	@Override
	public String howToCook() {
		return Edible.super.howToCook();
	}

	
	public static void main(String[] args) {
	Soup soup1 = new Soup("Escarole");
	Soup soup2 = new Soup("Matzah Ball");
	
	soup1.blow();
	System.out.println(soup2.howToEat());
	
	
	
	}
}

public class Sushi implements Edible {
	private int spicelevel;
	
	public Sushi() {
	}
	
	public Sushi(int spicelevel) {
		this.spicelevel = spicelevel;
	}
	
	public void eat() {
	System.out.println("The sushi has been eaten");	
	}

	public int getSpicelevel() {
		return spicelevel;
	}

	public void setSpicelevel(int spicelevel) {
		this.spicelevel = spicelevel;
	}

	@Override
	public String toString() {
		return "Sushi [spicelevel=" + spicelevel + "]";
	}
	
	//Implemented method from Edible
	 @Override
	public String howToEat() {
		return "Eat this with Chopsticks";
	}

	@Override
	public String howToCook() {
		
		return Edible.super.howToCook();
		
	}
	
	public static void main(String[] args) {
	Sushi Sashimi = new Sushi(3);
    Sushi Volcano = new Sushi(7);
	
    Volcano.eat();
    System.out.print(Sashimi.howToEat());
	}	
}




